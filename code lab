using System;
using System.Collections.Generic;
using System.Text;

class RC5
{
    const int w = 32;
    const int r = 12;
    const int b = 16;
    const int u = w / 8;
    const int c = (b + u - 1) / u;
    const int t = 2 * (r + 1);

    const uint P = 0xB7E15163;
    const uint Q = 0x9E3779B9;

    static uint RotateLeft(uint x, uint y)
    {
        return (x << (int)(y & (w - 1))) | (x >> (int)(w - (y & (w - 1))));
    }

    static uint RotateRight(uint x, uint y)
    {
        return (x >> (int)(y & (w - 1))) | (x << (int)(w - (y & (w - 1))));
    }

    static List<uint> KeyExpansion(List<byte> keyBytes)
    {
        List<uint> L = new List<uint>(new uint[c]);

        for (int i = b - 1; i >= 0; --i)
        {
            L[i / u] = (L[i / u] << 8) + keyBytes[i];
        }

        List<uint> S = new List<uint>(new uint[t]);
        S[0] = P;
        for (int i = 1; i < t; ++i)
            S[i] = S[i - 1] + Q;

        uint A = 0, B = 0;
        int ii = 0, jj = 0;
        for (int s = 0; s < 3 * Math.Max(c, t); ++s)
        {
            A = S[ii] = RotateLeft(S[ii] + A + B, 3);
            B = L[jj] = RotateLeft(L[jj] + A + B, A + B);
            ii = (ii + 1) % t;
            jj = (jj + 1) % c;
        }

        return S;
    }

    static void Encrypt(ref uint A, ref uint B, List<uint> S)
    {
        A += S[0];
        B += S[1];
        for (int i = 1; i <= r; ++i)
        {
            A = RotateLeft(A ^ B, B) + S[2 * i];
            B = RotateLeft(B ^ A, A) + S[2 * i + 1];
        }
    }

    static void Decrypt(ref uint A, ref uint B, List<uint> S)
    {
        for (int i = r; i >= 1; --i)
        {
            B = RotateRight(B - S[2 * i + 1], A) ^ A;
            A = RotateRight(A - S[2 * i], B) ^ B;
        }
        B -= S[1];
        A -= S[0];
    }

    public static string Task1(List<uint> source, int sourceSize, List<byte> key, bool encryptionMode)
    {
        List<uint> S = KeyExpansion(key);
        StringBuilder result = new StringBuilder();

        for (int i = 0; i < sourceSize; i += 2)
        {
            uint A = source[i];
            uint B = source[i + 1];

            if (encryptionMode)
                Encrypt(ref A, ref B, S);
            else
                Decrypt(ref A, ref B, S);

            result.Append($"{A:X8} {B:X8} ");
        }

        return result.ToString().Trim();
    }
}

class Program
{
    static void Main(string[] args)
    {
        var source = new List<uint> { 0x01234567, 0x89ABCDEF }; // приклад вхідних даних
        var key = new List<byte> {
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
        };

        string encrypted = RC5.Task1(source, source.Count, key, true);
        Console.WriteLine("Encrypted: " + encrypted);

        var encryptedWords = new List<uint>();
        foreach (var word in encrypted.Split())
            encryptedWords.Add(Convert.ToUInt32(word, 16));

        string decrypted = RC5.Task1(encryptedWords, encryptedWords.Count, key, false);
        Console.WriteLine("Decrypted: " + decrypted);
    }
}

